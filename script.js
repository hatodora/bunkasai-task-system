document.addEventListener('DOMContentLoaded', () => {
    // ‚ö†Ô∏è Firebase„ÅÆË®≠ÂÆö„Ååindex.html„ÅßÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÂâçÊèê„Å®„Åó„Åæ„Åô„ÄÇ
    // ------------------------------------------
    // --- 1. Firebase „Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆÂèÇÁÖß„ÇíÂèñÂæó ---
    // ------------------------------------------
    const database = firebase.database();
    
    // „Éá„Éº„ÇøÊ†ºÁ¥çÁî®„ÅÆÂèÇÁÖß„Éë„Çπ„ÇíÂÆöÁæ©
    const tasksRef = database.ref('tasks');
    const lostFoundsRef = database.ref('lost-founds');
    const shiftsRef = database.ref('shifts');
    const crowdsRef = database.ref('crowds');
    // ------------------------------------------

    // --- 2. DOMË¶ÅÁ¥†„ÅÆÂèñÂæó ---
    const timeElement = document.getElementById('current-time');
    const dateElement = document.getElementById('current-date');
    const weatherElement = document.getElementById('weather');
    const weatherIconElement = document.getElementById('weather-icon');

    const taskForm = document.getElementById('task-form');
    const taskInput = document.getElementById('task-input');
    const taskList = document.getElementById('task-list');
    const taskHistoryList = document.getElementById('task-history-list');
    const toggleTaskHistoryButton = document.getElementById('toggle-task-history');

    const lostFoundForm = document.getElementById('lost-found-form');
    const lostFoundItemInput = document.getElementById('lost-found-item-input');
    const lostFoundLocationInput = document.getElementById('lost-found-location-input');
    const lostFoundList = document.getElementById('lost-found-list');
    const lostFoundHistoryList = document.getElementById('lost-found-history-list');
    const toggleLostFoundHistoryButton = document.getElementById('toggle-lost-found-history');

    const emergencySelect = document.getElementById('emergency-select');
    const alertButton = document.getElementById('alert-button');
    const alertOverlay = document.getElementById('alert-overlay');
    const alertMessage = document.getElementById('alert-message');
    const alertOkButton = document.getElementById('alert-ok-button');
    const alertCancelButton = document.getElementById('alert-cancel-button');
    const fullScreenAlert = document.getElementById('full-screen-alert');
    const fullScreenMessage = document.getElementById('full-screen-message');
    
    const activeEmergencySection = document.getElementById('active-emergency-section');
    const activeEmergencyMessage = document.getElementById('active-emergency-message');
    const resolveButton = document.getElementById('resolve-button');

    const shiftTableBody = document.querySelector('#shift-table tbody');
    const shiftForm = document.getElementById('shift-form');
    const shiftStartTimeInput = document.getElementById('shift-start-time-input');
    const shiftEndTimeInput = document.getElementById('shift-end-time-input');
    const shiftPersonInput = document.getElementById('shift-person-input');
    const shiftRoleInput = document.getElementById('shift-role-input');
    const crowdForm = document.getElementById('crowd-form');
    const crowdLocationInput = document.getElementById('crowd-location-input');
    const crowdStatusInput = document.getElementById('crowd-status-input');
    const crowdList = document.getElementById('crowd-list');

    let isResolving = false;
    let currentEmergency = '';

    // --- 3. Â§©Ê∞óAPI„ÅÆË®≠ÂÆö„Å®Èñ¢Êï∞ ---
    const WEATHER_API_URL = "https://api.open-meteo.com/v1/forecast?latitude=35.658&longitude=139.701&current=temperature_2m,precipitation_probability,weather_code&timezone=Asia%2FTokyo&forecast_days=1";

    function getWeatherDisplay(code) {
        if (code === 0) return { icon: '‚òÄÔ∏è', text: 'Êô¥„Çå' };
        if (code >= 1 && code <= 3) return { icon: 'üå§Ô∏è', text: '„Åä„Åä„ÇÄ„Å≠Êô¥„Çå' };
        if (code >= 45 && code <= 48) return { icon: 'üå´Ô∏è', text: 'Èúß' };
        if (code >= 51 && code <= 55) return { icon: ' drizzle', text: 'ÈúßÈõ®' };
        if (code >= 61 && code <= 65) return { icon: 'üåßÔ∏è', text: 'Èõ®' };
        if (code >= 71 && code <= 75) return { icon: '‚ùÑÔ∏è', text: 'Èõ™' };
        if (code >= 80 && code <= 82) return { icon: '‚òîÔ∏è', text: '„Å´„Çè„ÅãÈõ®' };
        if (code >= 95 && code <= 99) return { icon: '‚õàÔ∏è', text: 'Èõ∑Èõ®' };
        return { icon: '‚ùì', text: '‰∏çÊòé' };
    }

    async function updateWeather() {
        try {
            const response = await fetch(WEATHER_API_URL);
            if (!response.ok) throw new Error('Failed to fetch weather data');
            
            const data = await response.json();
            
            const temp = data.current.temperature_2m;
            const precipProb = data.current.precipitation_probability || 0; // %
            const weatherCode = data.current.weather_code;
            const weatherDisplay = getWeatherDisplay(weatherCode);

            weatherIconElement.textContent = weatherDisplay.icon;
            weatherElement.textContent = `${Math.round(temp)}¬∞C ${weatherDisplay.text} (ÈôçÊ∞¥: ${precipProb}%)`; 

        } catch (error) {
            console.error("Â§©Ê∞óÊÉÖÂ†±„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:", error);
            weatherElement.textContent = 'Â§©Ê∞óÊÉÖÂ†±ÂèñÂæó„Ç®„É©„Éº';
            weatherIconElement.textContent = '‚ö†Ô∏è';
        }
    }

    // --- 4. „É™„Ç¢„É´„Çø„Ç§„É†„Éá„Éº„Çø„É™„Çπ„Éä„Éº„Å®„É¨„É≥„ÉÄ„É™„É≥„Ç∞Èñ¢Êï∞ ---

    // „Çø„Çπ„ÇØ„ÅÆ„É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞
    tasksRef.on('value', (snapshot) => {
        taskList.innerHTML = ''; 
        taskHistoryList.innerHTML = ''; 
        
        snapshot.forEach((childSnapshot) => {
            const taskKey = childSnapshot.key;
            const task = childSnapshot.val();
            
            const isCompleted = task.completed || false;
            const targetList = isCompleted ? taskHistoryList : taskList;

            const li = document.createElement('li');
            li.textContent = task.text;

            const completeButton = document.createElement('button');
            completeButton.textContent = isCompleted ? 'Êú™ÂÆå‰∫Ü„Å´Êàª„Åô' : 'ÂÆå‰∫Ü';
            completeButton.className = isCompleted ? 'btn danger-btn small-btn' : 'btn accent-btn small-btn';
            
            completeButton.onclick = () => {
                tasksRef.child(taskKey).update({ completed: !isCompleted });
            };
            
            li.appendChild(completeButton);
            if (isCompleted) {
                li.classList.add('complete');
                targetList.prepend(li);
            } else {
                targetList.appendChild(li);
            }
        });
    });

    // ËêΩ„Å®„ÅóÁâ©„ÅÆ„É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞
    lostFoundsRef.on('value', (snapshot) => {
        lostFoundList.innerHTML = '';
        lostFoundHistoryList.innerHTML = '';
        
        snapshot.forEach((childSnapshot) => {
            const lfKey = childSnapshot.key;
            const lf = childSnapshot.val();
            
            const isResolved = lf.resolved || false;
            const targetList = isResolved ? lostFoundHistoryList : lostFoundList;

            const li = document.createElement('li');
            li.innerHTML = `<strong>${lf.item}</strong><br>Â†¥ÊâÄ: ${lf.location}`;

            const resolveButton = document.createElement('button');
            resolveButton.textContent = isResolved ? 'Êú™Ëß£Ê±∫„Å´Êàª„Åô' : 'Ëß£Ê±∫';
            resolveButton.className = isResolved ? 'btn danger-btn small-btn' : 'btn accent-btn small-btn';
            
            resolveButton.onclick = () => {
                lostFoundsRef.child(lfKey).update({ resolved: !isResolved });
            };
            
            li.appendChild(resolveButton);
            if (isResolved) {
                li.classList.add('complete');
                li.innerHTML += `<span style="font-size:0.8em; color:#34c759;"> (Ëß£Ê±∫Ê∏à)</span>`;
                targetList.prepend(li);
            } else {
                targetList.appendChild(li);
            }
        });
    });

    // „Ç∑„Éï„Éà„ÅÆ„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Å®„ÉÅ„Çß„ÉÉ„ÇØ
    function renderAndCheckShifts(shiftsData) {
        shiftTableBody.innerHTML = '';
        const now = new Date();
        const currentDateStr = now.toISOString().slice(0, 10);
        const currentTime = now.getTime();
        
        const shiftsArray = Object.keys(shiftsData || {}).map(key => ({
            key: key,
            ...shiftsData[key]
        }));

        shiftsArray.forEach((shift) => {
            const startTimestamp = Date.parse(`${currentDateStr}T${shift.startTime}:00`);
            const endTimestamp = Date.parse(`${currentDateStr}T${shift.endTime}:00`);

            // ÁµÇ‰∫ÜÊôÇÂàª„ÇíÈÅé„Åé„Åü„ÇâËá™Âãï„ÅßDB„Åã„ÇâÂâäÈô§
            if (currentTime > endTimestamp) {
                shiftsRef.child(shift.key).remove();
                return; 
            }
            
            const row = document.createElement('tr');
            row.dataset.key = shift.key;
            
            row.innerHTML = `
                <td class="shift-time-cell">${shift.startTime}„Äú${shift.endTime}</td>
                <td>${shift.person}</td>
                <td>${shift.role}</td>
                <td><button class="end-shift-btn">ÁµÇ‰∫ÜÊ∏à„Åø</button></td>
            `;

            if (currentTime >= startTimestamp && currentTime < endTimestamp) {
                row.classList.add('active-shift');
            }

            shiftTableBody.appendChild(row);
        });
        
        // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíÂÜçË®≠ÂÆö
        document.querySelectorAll('.end-shift-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                const row = e.target.closest('tr');
                const key = row.dataset.key;
                shiftsRef.child(key).remove(); 
            });
        });
    }

    // „Ç∑„Éï„Éà„ÅÆ„É™„Ç¢„É´„Çø„Ç§„É†„É™„Çπ„Éä„Éº
    shiftsRef.on('value', (snapshot) => {
        renderAndCheckShifts(snapshot.val()); 
    });

    // Ê∑∑ÈõëÁä∂Ê≥Å„ÅÆ„É™„Ç¢„É´„Çø„Ç§„É†„É™„Çπ„Éä„Éº
    crowdsRef.on('value', (snapshot) => {
        const crowdData = snapshot.val() || {}; 
        crowdList.innerHTML = '';
        
        for (const location in crowdData) {
            const status = crowdData[location];
            const li = document.createElement('li');
            li.innerHTML = `<strong>${location}:</strong> <span class="crowd-status crowd-status-${status}">${status}</span>`;
            crowdList.appendChild(li);
        }
    });


    // --- 5. ÊôÇÂàªÊõ¥Êñ∞„Å®„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞ ---

    // ÁèæÂú®„ÅÆÊôÇÂàª„Å®Êó•‰ªò„ÇíË°®Á§∫„Åó„ÄÅ„Ç∑„Éï„Éà„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÊõ¥Êñ∞
    function updateDateTime() {
        const now = new Date();
        timeElement.textContent = now.toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' });
        dateElement.textContent = now.toLocaleDateString('ja-JP', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
        
        // „Ç∑„Éï„Éà„ÅÆÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„ÄÅDOM„ÅÆ„ÇØ„É©„Çπ„ÇíÊõ¥Êñ∞
        const currentDateStr = now.toISOString().slice(0, 10);
        const currentTime = now.getTime();

        document.querySelectorAll('#shift-table tr').forEach(row => {
            const timeCell = row.querySelector('td.shift-time-cell');
            if (!timeCell) return;
            
            const timeRange = timeCell.textContent.split('„Äú');
            const [startTimeStr, endTimeStr] = timeRange;
            if (!startTimeStr || !endTimeStr) return;

            const startTimestamp = Date.parse(`${currentDateStr}T${startTimeStr}:00`);
            const endTimestamp = Date.parse(`${currentDateStr}T${endTimeStr}:00`);
            
            if (currentTime >= startTimestamp && currentTime < endTimestamp) {
                row.classList.add('active-shift');
            } else {
                row.classList.remove('active-shift');
            }
        });
    }
    
    // Â±•Ê≠¥Ë°®Á§∫„ÅÆ„Éà„Ç∞„É´Èñ¢Êï∞
    function toggleHistory(historyList, button) {
        if (historyList.style.display === 'none') {
            historyList.style.display = 'block';
            button.textContent = button.textContent.replace('„ÇíË°®Á§∫', '„ÇíÈùûË°®Á§∫');
        } else {
            historyList.style.display = 'none';
            button.textContent = button.textContent.replace('„ÇíÈùûË°®Á§∫', '„ÇíË°®Á§∫');
        }
    }

    // --- 6. „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº („Éá„Éº„Çø„Éô„Éº„ÇπÊõ∏„ÅçËæº„Åø) ---

    // „Çø„Çπ„ÇØ„Éï„Ç©„Éº„É†„ÅÆÈÄÅ‰ø°
    taskForm.addEventListener('submit', (e) => {
        e.preventDefault();
        if (taskInput.value.trim() !== '') {
            const newTask = {
                text: taskInput.value.trim(),
                timestamp: Date.now(),
                completed: false 
            };
            tasksRef.push(newTask); 
            taskInput.value = '';
        }
    });
    
    // „Çø„Çπ„ÇØÂ±•Ê≠¥„ÅÆ„Éà„Ç∞„É´
    toggleTaskHistoryButton.addEventListener('click', () => {
        toggleHistory(taskHistoryList, toggleTaskHistoryButton);
    });

    // ËêΩ„Å®„ÅóÁâ©„Éï„Ç©„Éº„É†„ÅÆÈÄÅ‰ø°
    lostFoundForm.addEventListener('submit', (e) => {
        e.preventDefault();
        if (lostFoundItemInput.value.trim() !== '' && lostFoundLocationInput.value.trim() !== '') {
            const newLostFound = {
                item: lostFoundItemInput.value.trim(),
                location: lostFoundLocationInput.value.trim(),
                timestamp: Date.now(),
                resolved: false
            };
            lostFoundsRef.push(newLostFound);
            lostFoundItemInput.value = '';
            lostFoundLocationInput.value = '';
        }
    });

    // ËêΩ„Å®„ÅóÁâ©Â±•Ê≠¥„ÅÆ„Éà„Ç∞„É´
    toggleLostFoundHistoryButton.addEventListener('click', () => {
        toggleHistory(lostFoundHistoryList, toggleLostFoundHistoryButton);
    });

    // „Ç∑„Éï„Éà„Éï„Ç©„Éº„É†„ÅÆÈÄÅ‰ø°
    shiftForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const startTime = shiftStartTimeInput.value;
        const endTime = shiftEndTimeInput.value;
        if (!startTime || !endTime || !shiftPersonInput.value || !shiftRoleInput.value) {
             alert('„Åô„Åπ„Å¶„ÅÆ„Ç∑„Éï„ÉàÊÉÖÂ†±„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
             return;
        }

        const newShift = {
            startTime: startTime,
            endTime: endTime,
            person: shiftPersonInput.value,
            role: shiftRoleInput.value
        };
        shiftsRef.push(newShift);
        shiftForm.reset();
    });

    // Ê∑∑ÈõëÁä∂Ê≥Å„Éï„Ç©„Éº„É†„ÅÆÈÄÅ‰ø°
    crowdForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const location = crowdLocationInput.value;
        const status = crowdStatusInput.value;
        if (location && status) {
            crowdsRef.child(location).set(status); 
            crowdForm.reset();
        } else {
            alert('Â†¥ÊâÄ„Å®Áä∂Ê≥Å„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
        }
    });

    // Ë≠¶Â†±Èñ¢ÈÄ£„ÅÆÂá¶ÁêÜ (ÁúÅÁï•„Å™„Åó)
    alertOkButton.addEventListener('click', () => {
        if (isResolving) {
            alertOverlay.style.display = 'none';
            activeEmergencySection.style.display = 'none';
            currentEmergency = '';
            isResolving = false;
        } else {
            const selectedEmergency = emergencySelect.value;
            alertOverlay.style.display = 'none';
            fullScreenMessage.textContent = selectedEmergency;
            fullScreenAlert.style.display = 'flex';
            currentEmergency = selectedEmergency;

            setTimeout(() => {
                fullScreenAlert.style.display = 'none';
                activeEmergencyMessage.textContent = currentEmergency;
                activeEmergencySection.style.display = 'flex';
            }, 10000);
        }
    });

    alertCancelButton.addEventListener('click', () => {
        alertOverlay.style.display = 'none';
        isResolving = false;
    });

    alertButton.addEventListener('click', () => {
        const selectedEmergency = emergencySelect.value;
        if (selectedEmergency) {
            alertMessage.textContent = `${selectedEmergency}„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Åì„Çå„ÅßË≠¶Â†±„ÇíÁô∫„Åó„Åæ„Åô„ÅãÔºü`;
            alertOverlay.style.display = 'flex';
            isResolving = false;
        } else {
            alert('Á∑äÊÄ•‰∫ãÊÖã„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
        }
    });

    resolveButton.addEventListener('click', () => {
        if (currentEmergency) {
            alertMessage.textContent = `${currentEmergency}„ÅØËß£Ê±∫„Åó„Åæ„Åó„Åü„ÅãÔºü`;
            alertOverlay.style.display = 'flex';
            isResolving = true;
        } else {
            alert('ÁèæÂú®Áô∫‰ª§‰∏≠„ÅÆÁ∑äÊÄ•‰∫ãÊÖã„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ');
        }
    });

    // --- 7. ÂàùÊúüÂåñ„Å®„Çø„Ç§„Éû„ÉºË®≠ÂÆö ---
    
    // 1Áßí„Åî„Å®„Å´ÊôÇÂàª„ÇíÊõ¥Êñ∞Ôºà„Ç∑„Éï„Éà„ÅÆ„Éè„Ç§„É©„Ç§„Éà„ÉÅ„Çß„ÉÉ„ÇØ„ÇÇÂê´„ÇÄÔºâ
    setInterval(updateDateTime, 1000);
    // 10ÂàÜ„Åî„Å®„Å´Â§©Ê∞ó„ÇíÊõ¥Êñ∞
    setInterval(updateWeather, 600000); 

    updateDateTime();
    updateWeather();


    // --- 8. ÈñãÁô∫Ë£úÂä©Ê©üËÉΩ: Ëá™Âãï„É™„É≠„Éº„ÉâË®≠ÂÆö ---
    // ‚ö†Ô∏è Êú¨Áï™Áí∞Â¢É„Å´„Éá„Éó„É≠„Ç§„Åô„ÇãÈöõ„ÅØ„ÄÅ„Åì„ÅÆÊ©üËÉΩÂÖ®‰Ωì„ÇíÂâäÈô§„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
    (function setupAutoReload() {
        const RELOAD_INTERVAL_MS = 3000; 
        let lastModified = null;

        function fetchLastModified() {
            fetch(window.location.href, { cache: 'no-store', method: 'HEAD' })
                .then(response => {
                    const currentLastModified = response.headers.get('Last-Modified');
                    
                    if (currentLastModified) {
                        if (lastModified === null) {
                            lastModified = currentLastModified;
                            console.log('Ëá™Âãï„É™„É≠„Éº„ÉâÁõ£Ë¶ñ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü„ÄÇ');
                        } else if (lastModified !== currentLastModified) {
                            console.log('„Éï„Ç°„Ç§„É´„ÅÆÂ§âÊõ¥„ÇíÊ§úÂá∫„Åó„Åæ„Åó„Åü„ÄÇ„É™„É≠„Éº„Éâ„Åó„Åæ„Åô...');
                            window.location.reload(true);
                        }
                    }
                })
                .catch(error => {
                    // console.warn('Ëá™Âãï„É™„É≠„Éº„Éâ„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error);
                });
        }

        setInterval(fetchLastModified, RELOAD_INTERVAL_MS);
    })();
});